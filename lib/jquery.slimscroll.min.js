/*
 * Version: 1.3.1
 * 2020-12-16修改记录：窗口缩放时重计算，hover时常显（内容不需滚动除外），内容长度变化时重计算，其他部分bug
*/
(function (a) { jQuery.fn.extend({ slimScroll: function (b) { var c = { width: "auto", height: "250px", size: "7px", color: "#000", position: "right", distance: "1px", start: "top", opacity: 0.4, alwaysVisible: false, disableFadeOut: false, railVisible: false, railColor: "#333", railOpacity: 0.2, railDraggable: true, railClass: "slimScrollRail", barClass: "slimScrollBar", wrapperClass: "slimScrollDiv", allowPageScroll: false, wheelStep: 20, touchScrollStep: 200, borderRadius: "7px", railBorderRadius: "7px" }; var d = a.extend(c, b); this.each(function () { var B, v, m, s, E, e, q, w, r, l, n = "<div></div>", y = 30, u = false; var F = a(this); if (F.parent().hasClass(d.wrapperClass)) { var k = F.scrollTop(); z = F.parent().find("." + d.barClass); f = F.parent().find("." + d.railClass); G(); if (a.isPlainObject(b)) { if ("height" in b && b.height == "auto") { F.parent().css("height", "auto"); F.css("height", "auto"); var p = F.parent().parent().height(); F.parent().css("height", p); F.css("height", p) } else { if ("height" in b) { var x = b.height; F.parent().css("height", x); F.css("height", x) } } if ("scrollTo" in b) { k = parseInt(d.scrollTo) } else { if ("scrollBy" in b) { k += parseInt(d.scrollBy) } else { if ("destroy" in b) { z.remove(); f.remove(); F.unwrap(); return } } } A(k, false, true) } return } d.height = (d.height == "auto") ? F.parent().height() : d.height; var j = a(n).addClass(d.wrapperClass).css({ position: "relative", overflow: "hidden", width: d.width, height: d.height }); F.css({ overflow: "hidden", width: d.width, height: d.height }); var f = a(n).addClass(d.railClass).css({ width: d.size, height: "100%", position: "absolute", top: 0, display: (d.alwaysVisible && d.railVisible) ? "block" : "none", "border-radius": d.railBorderRadius, background: d.railColor, opacity: d.railOpacity, zIndex: 90 }); var z = a(n).addClass(d.barClass).css({ background: d.color, width: d.size, position: "absolute", top: 0, opacity: d.opacity, display: d.alwaysVisible ? "block" : "none", "border-radius": d.borderRadius, BorderRadius: d.borderRadius, MozBorderRadius: d.borderRadius, WebkitBorderRadius: d.borderRadius, zIndex: 99 }); var g = (d.position == "right") ? { right: d.distance } : { left: d.distance }; f.css(g); z.css(g); F.wrap(j); F.parent().append(z); F.parent().append(f); if (d.railDraggable) { z.bind("mousedown", function (h) { var H = a(document); m = true; t = parseFloat(z.css("top")); pageY = h.pageY; H.bind("mousemove.slimscroll", function (I) { currTop = t + I.pageY - pageY; z.css("top", currTop); A(0, z.position().top, false) }); H.bind("mouseup.slimscroll", function (I) { m = false; o(); H.unbind(".slimscroll") }); return false }).bind("selectstart.slimscroll", function (h) { h.stopPropagation(); h.preventDefault(); return false }) } f.hover(function () { i() }, function () { o() }); z.hover(function () { v = true }, function () { v = false }); F.hover(function () { B = true; i() }, function () { B = false; o() }); F.bind("touchstart", function (H, h) { if (H.originalEvent.touches.length) { E = H.originalEvent.touches[0].pageY } }); F.click(function () { B = true; clearTimeout(e); e = setTimeout(function () { i() }, 300) }); F.bind("touchmove", function (H) { if (!u) { H.originalEvent.preventDefault() } if (H.originalEvent.touches.length) { var h = (E - H.originalEvent.touches[0].pageY) / d.touchScrollStep; A(h, true); E = H.originalEvent.touches[0].pageY } }); G(); if (d.start === "bottom") { z.css({ top: F.outerHeight() - z.outerHeight() }); A(0, true) } else { if (d.start !== "top") { A(a(d.start).position().top, null, true); if (!d.alwaysVisible) { z.hide() } } } C(); function D(H) { if (!B) { return } var H = H || window.event; var I = 0; if (H.wheelDelta) { I = -H.wheelDelta / 120 } if (H.detail) { I = H.detail / 3 } var h = H.target || H.srcTarget || H.srcElement; if (a(h).closest("." + d.wrapperClass).is(F.parent())) { A(I, true) } if (H.preventDefault && !u) { H.preventDefault() } if (!u) { H.returnValue = false } } function A(L, I, h) { u = false; var K = L; var J = F.outerHeight() - z.outerHeight(); if (I) { K = parseInt(z.css("top")) + L * parseInt(d.wheelStep) / 100 * z.outerHeight(); K = Math.min(Math.max(K, 0), J); K = (L > 0) ? Math.ceil(K) : Math.floor(K); z.css({ top: K + "px" }) } r = parseInt(z.css("top")) / (F.outerHeight() - z.outerHeight()); K = r * (F[0].scrollHeight - F.outerHeight()); if (h) { K = L; var H = K / F[0].scrollHeight * F.outerHeight(); H = Math.min(Math.max(H, 0), J); z.css({ top: H + "px" }) } F.scrollTop(K); F.trigger("slimscrolling", ~~K); i() } function C() { if (window.addEventListener) { this.addEventListener("DOMMouseScroll", D, false); this.addEventListener("mousewheel", D, false); this.addEventListener("MozMousePixelScroll", D, false) } else { document.attachEvent("onmousewheel", D) } } function G() { w = Math.max((F.outerHeight() / F[0].scrollHeight) * F.outerHeight(), y); z.css({ height: w + "px" }); var h = w == F.outerHeight() ? "none" : "block"; if (B) { z.css({ display: h }); f.css({ display: h }) } } function i() { G(); clearTimeout(s); if (r == ~~r) { u = d.allowPageScroll; if (l != r) { var h = (~~r == 0) ? "top" : "bottom"; F.trigger("slimscroll", h) } } else { u = false } l = r; if (w >= F.outerHeight()) { u = true; return } if (B) { z.stop(true, true).fadeIn(200); if (d.railVisible) { f.stop(true, true).fadeIn(200) } } } function o() { if (!d.alwaysVisible) { s = setTimeout(function () { if (!(d.disableFadeOut && B) && !v && !m) { z.fadeOut(300); f.fadeOut(300) } }, 200) } } i(); o(); a(window).resize(function () { clearTimeout(q); q = setTimeout(function () { i(); o() }, 100) }) }); return this } }); jQuery.fn.extend({ slimscroll: jQuery.fn.slimScroll }) })(jQuery);
