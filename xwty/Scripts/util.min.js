(function ($) { $.fn.extend({ moveToStart: function () { var $this = this; var $t = this[0]; if ($t.setSelectionRange) { $t.setSelectionRange(0, 0); $t.focus() } else { if ($t.createTextRange) { var range = $t.createTextRange(); range.move("character", 0); range.select() } else { $t.focus() } } return $this }, moveToEnd: function () { var $this = this; try { var $t = this[0]; if ($t.setSelectionRange) { $t.setSelectionRange($(this).val().length, $(this).val().length); $t.focus() } else { if ($t.createTextRange) { var range = $t.createTextRange(); range.move("character", $(this).val().length); range.select() } else { $t.focus() } } } catch (e) { } return $this }, loading: function (msg) { var $this = this; if (!msg) { msg = "loading" } $this.data("rOrgText", $this.html()); $this.data("isLoading", 1); $this.html(msg); return $this }, isLoading: function () { return this.data("isLoading") == 1 }, resetLoading: function () { var $this = this; $this.html($this.data("rOrgText")); $this.data("isLoading", 0) }, getJson: function (options) { var settings = { checkboxValToString: true, removeEmpty: false, selector: "input:not([type=file]),select,textarea" }; $.extend(settings, options); var json = {}; $.each(this.find(settings.selector), function (i) { var el = $(this), key = el.attr("name"), val = $.trim(el.val()); if (!key) { key = el.attr("id") } if (key != undefined && key != "" && val !== undefined && val !== null && (!settings.removeEmpty || val != "")) { if (el.is(":checkbox")) { if (!settings.checkboxValToString) { el.prop("checked") && ($.isArray(json[key]) ? json[key].push(val) : json[key] = [val]) } else { el.prop("checked") && (json[key] = json[key] ? json[key] + "," + val : val) } } else { if (el.is(":radio")) { el.prop("checked") && (json[key] = val) } else { json[key] = val } } } }); return json }, checkInput: function (options) { $e = this; var settings = { hasTitle: false, invalidClass: "rInvalid" }; $.extend(settings, options); var validateResult = true; var $inputs; if ($e.is("[vrf]")) { $inputs = $e } else { $inputs = $e.find("[vrf]") } $inputs.each(function (i, el) { var $el = $(el); var vrfd = true; var _v = $.trim($el.val()); var _vl = _v.length; var _cl = $el.attr("length"); var _rq = $el.attr("required"); var _vr = $el.attr("valueRange"); var _isNumber = $el.attr("number"); var _startWith = $el.attr("startWith"); var _eq = $el.attr("equal"); var _cr = new RegExp($el.attr("regex"), "i"); if (_cl != undefined) { var min = _cl.split(",")[0]; var max = _cl.split(",")[1]; if (_vl < min || _vl > max) { vrfd = false } } if (vrfd && _rq != undefined && _v == "") { vrfd = false } if (vrfd && _v != "" && _cr != undefined && !_cr.test(_v)) { vrfd = false } if (vrfd && _v != "" && _isNumber != undefined) { if (isNaN(_v)) { vrfd = false } } if (vrfd && _v != "" && _vr != undefined) { var min = _vr.split(",")[0]; var max = _vr.split(",")[1]; if (parseFloat(_v) < parseFloat(min) || parseFloat(_v) > parseFloat(max)) { vrfd = false } } if (vrfd && _v != "" && _startWith != undefined) { if (_v.indexOf(_startWith) != 0) { vrfd = false } } if (vrfd && _eq != undefined) { if (_v != $.trim($(_eq).val())) { vrfd = false } } if (!vrfd) { if (settings.hasTitle) { $el.prev().addClass(settings.invalideClass) } if (validateResult) { validateResult = false } setTimeout(function () { $el.addClass(settings.invalidClass) }, 10) } else { if (settings.hasTitle) { $el.prev().removeClass(settings.invalidClass) } setTimeout(function () { $el.removeClass(settings.invalidClass) }, 10) } }); return validateResult }, checkAndPost: function (options, validateOptions) { var $t = this; var settings = { url: null, dataType: "json", extraData: {}, success: null, error: null, complete: null, invalid: null, before: null, beforeSend: null, delay: 0 }; var validateSettings = { hasTitle: false, invalidClass: "rInvalid" }; $.extend(settings, options); $.extend(validateSettings, validateOptions); if (!$t.checkInput(validateSettings)) { if (settings.invalid && typeof (settings.invalid) == "function") { settings.invalid() } else { showMsg("填写有误") } } else { var data = $.extend($t.getJson(), settings.extraData); if (settings.before && typeof (settings.before) == "function") { settings.before() } setTimeout(function () { $.ajax({ beforeSend: function (xhr) { if (settings.beforeSend && typeof (settings.beforeSend) == "function") { settings.beforeSend(xhr) } }, url: settings.url, data: data, type: "post", dataType: settings.dataType, success: function (r) { if (settings.success && typeof (settings.success) == "function") { settings.success(r) } }, error: function (r) { if (settings.error && typeof (settings.error) == "function") { settings.error(r) } }, complete: function () { if (settings.complete && typeof (settings.complete) == "function") { settings.complete() } } }) }, settings.delay) } }, getBackgroundImage: function () { var bgImg = this.css("background-image"); if (bgImg) { if (bgImg.indexOf('"') != -1) { bgImg = bgImg.substring(bgImg.indexOf('"') + 1, bgImg.lastIndexOf('"')) } else { bgImg = bgImg.substring(bgImg.indexOf("(") + 1, bgImg.indexOf(")")) } } return bgImg }, fixTable: function (options) { var $this = this; var settings = { width: "100%", height: "100%", fixColumnNumber: 1, autoShrinkWidth: false, autoShrinkHeight: false }; $.extend(settings, options); $this.each(function (i, e) { var $e = $(e); var tableID = $e.attr("id"); if ($("#" + tableID + "_tableLayout").length != 0) { $("#" + tableID + "_tableLayout").before($("#" + tableID)); $("#" + tableID + "_tableLayout").empty() } else { $("#" + tableID).after('<div id="' + tableID + '_tableLayout" autoShrinkWidth=' + settings.autoShrinkWidth + ' fixColumNumber="' + settings.fixColumnNumber + '" autoShrinkHeight="' + settings.autoShrinkHeight + '" class="ftLayout" style="overflow:hidden;position:relative"></div>') } var $layoutDiv = $("#" + tableID + "_tableLayout"); $layoutDiv.css({ width: settings.width, height: settings.height }); $('<div id="' + tableID + '_tableFix" class="ftFix"></div><div id="' + tableID + '_tableHead" class="ftHead"></div><div id="' + tableID + '_tableColumn" class="ftColumn"></div><div id="' + tableID + '_tableData" class="ftData"></div>').appendTo("#" + tableID + "_tableLayout"); var $fixDiv = $("#" + tableID + "_tableFix"), $headDiv = $("#" + tableID + "_tableHead"), $columnDiv = $("#" + tableID + "_tableColumn"), $dataDiv = $("#" + tableID + "_tableData"); var oldtable = $("#" + tableID); var tableFixClone = oldtable.clone(true); tableFixClone.attr("id", tableID + "_tableFixClone"); tableFixClone.addClass("ftTableFix"); $fixDiv.append(tableFixClone); var tableHeadClone = oldtable.clone(true); tableHeadClone.attr("id", tableID + "_tableHeadClone"); tableHeadClone.addClass("ftTableHead"); $headDiv.append(tableHeadClone); var tableColumnClone = oldtable.clone(true); tableColumnClone.attr("id", tableID + "_tableColumnClone"); tableColumnClone.addClass("ftTableColumn"); $columnDiv.append(tableColumnClone); $dataDiv.append(oldtable); var $dataTable = oldtable; $dataTable.addClass("ftTableData"); $layoutDiv.find("table").each(function () { $(this).css("margin", "0") }); $dataDiv.scroll(function () { $headDiv.scrollLeft($dataDiv.scrollLeft()); $columnDiv.scrollTop($dataDiv.scrollTop()) }); $dataDiv.css({ "overflow-x": "scroll", "overflow-y": "scroll", width: "100%", height: "100%", position: "absolute", left: 0, top: 0 }); ftSetSize(tableID) }) }, paging: function (totalCount, pageIdx, pageSize, loadDataFunc, op) { var $this = this; var settings = { pagingCount: 9, showLastPage: true, showJump: true, showTotal: true }; var id = getGuid(false); $.extend(settings, op); function getTotalPage() { if (totalCount == 0) { return 1 } else { if (totalCount % pageSize == 0) { return totalCount / pageSize } else { return parseInt(totalCount / pageSize) + 1 } } } var totalPage = getTotalPage(); function getPagingBtn(pageIdx, enabled) { if (enabled) { return '<a class="paging" href="javascript:;" onclick="' + loadDataFunc.replace("{0}", pageIdx) + '">' + pageIdx + "</a>" } else { return '<span class="paging current">' + pageIdx + "</span>" } } function getPagings() { var html = '<div class="pagings">' + (settings.showTotal ? '<span class="paging_total_count">共' + totalCount + "条</span>" : ""); if (pageIdx > 1) { html += '<a class="paging" href="javascript:;" onclick="' + loadDataFunc.replace("{0}", pageIdx - 1) + '" style="border-radius:3px 0 0 3px">&lt;</a>' } else { html += '<span class="paging current" style="border-radius:3px 0 0 3px">&lt;</span>' } var leftCount = 3, rightCount = 3; if (totalPage <= settings.pagingCount) { for (var i = 1; i <= totalPage; i++) { if (pageIdx == i) { html += getPagingBtn(i, false) } else { html += getPagingBtn(i, true) } } } else { leftCount = settings.pagingCount % 2 == 0 ? parseInt(settings.pagingCount / 2 - 1) : parseInt(settings.pagingCount / 2); rightCount = parseInt(settings.pagingCount / 2); if (pageIdx <= leftCount + 1) { for (var i = 1; i <= settings.pagingCount - 1; i++) { if (i == pageIdx) { html += getPagingBtn(i, false) } else { html += getPagingBtn(i, true) } } html += '<span class="paging pgdot">...</span>'; if (settings.showLastPage) { html += getPagingBtn(totalPage, true) } } else { html += getPagingBtn(1, true); html += '<span class="paging pgdot">...</span>'; if (pageIdx >= totalPage - rightCount) { for (var i = totalPage - (settings.pagingCount - 1) + 1; i <= totalPage; i++) { if (i == pageIdx) { html += getPagingBtn(i, false) } else { html += getPagingBtn(i, true) } } } else { for (var i = pageIdx - leftCount + 1; i <= pageIdx + rightCount - 1; i++) { if (i == pageIdx) { html += getPagingBtn(i, false) } else { html += getPagingBtn(i, true) } } html += '<span class="paging pgdot">...</span>'; if (settings.showLastPage) { html += getPagingBtn(totalPage, true) } } } } if (pageIdx < totalPage) { html += '<a class="paging" href="javascript:;" onclick="' + loadDataFunc.replace("{0}", pageIdx + 1) + '" style="border-right:1px solid #ddd;border-radius:0 3px 3px 0">&gt;</a>' } else { html += '<span class="paging current" style="border-right:1px solid #ddd;border-radius:0 3px 3px 0;">&gt;</span>' } if (settings.showJump) { html += '<label class="lb_txtPage lb_txtPage1">转到第</label><input type="text" id="pgt_' + id + '" value="' + pageIdx + '" class="txtPage"/><label class="lb_txtPage lb_txtPage2">页</label><label id="pgb_' + id + '" class="btn_jumpToPage">GO</label>' } return html + "</div>" } $this.html(getPagings()); function getPageTxtVal($t) { var _v = $t.val().trim(); _v = parseInt(_v); if (isNaN(_v)) { $t.val(pageIdx); _v = pageIdx } else { if (_v < 1) { _v = 1; $t.val(_v) } else { if (_v > totalPage) { _v = totalPage; $t.val(_v) } } } return _v } $("#pgt_" + id).keyup(function (e) { if (e.keyCode == 13) { var pg = getPageTxtVal($(this)); if (pg != pageIdx) { eval(loadDataFunc.replace("{0}", pg)) } } }).click(function () { $(this).select() }); $("#pgb_" + id).click(function () { var pg = getPageTxtVal($("#pgt_" + id)); if (pg != pageIdx) { eval(loadDataFunc.replace("{0}", pg)) } }) } }); $(document).on("blur", "[vrf]", function () { $(this).checkInput() }).on("keyup", "[vrf]", function () { $(this).checkInput() }).on("change", "[vrf]", function () { $(this).checkInput() }); $(window).resize(function () { $(".ftLayout").each(function () { var tableID = $(this).attr("id").replace("_tableLayout", ""); ftSetSize(tableID) }) }) })(jQuery); var compressImageTempUrl; function compressImage(a, b) { var c = { maxWidth: 800, fixedWidth: false, quality: 0.9, loading: null, processing: null }; $.extend(c, b); return new Promise(function (g, f) { if (a.type.indexOf("image") < 0) { f("不支持的图片格式") } else { if (c.loading && typeof (c.loading) == "function") { c.loading() } var d; if (window.URL) { d = window.URL.createObjectURL(a); compressImageTempUrl = d; g(d) } else { var e = new FileReader(); e.onload = function (h) { d = e.result; compressImageTempUrl = d; g(d) }; e.readAsDataURL(file) } } }).then(function (d) { return new Promise(function (g, f) { var e = new Image(); e.onload = function () { g(e) }; e.onerror = function () { if (window.URL && compressImageTempUrl) { window.URL.revokeObjectURL(compressImageTempUrl); compressImageTempUrl = null } f("加载图片失败") }; e.src = d }) }).then(function (d) { return new Promise(function (j, i) { try { if (c.processing && typeof (c.processing) == "function") { c.processing() } var e = document.createElement("canvas"); if (d.width > c.maxWidth || c.fixedWidth) { e.width = c.maxWidth; e.height = parseInt(c.maxWidth * d.height / d.width) } else { e.width = d.width; e.height = d.height } var f = e.getContext("2d"); f.drawImage(d, 0, 0, e.width, e.height); var g = e.toDataURL("image/jpeg", c.quality); if (window.URL && compressImageTempUrl) { window.URL.revokeObjectURL(compressImageTempUrl); compressImageTempUrl = null } j(g) } catch (h) { i("压缩图片失败") } }) }) } function compressImage1(b, e) { var g = { maxWidth: 800, fixedWidth: false, quality: 0.9, loading: null, processing: null, error: null, success: null }; $.extend(g, e); if (b.type.indexOf("image") < 0) { if (g.error && typeof (g.error) == "function") { g.error("不支持的图片格式") } } else { if (g.loading && typeof (g.loading) == "function") { g.loading() } function a(l) { try { if (g.processing && typeof (g.processing) == "function") { g.processing() } var h = document.createElement("canvas"); if (l.width > g.maxWidth || g.fixedWidth) { h.width = g.maxWidth; h.height = parseInt(g.maxWidth * l.height / l.width) } else { h.width = l.width; h.height = l.height } var i = h.getContext("2d"); i.drawImage(l, 0, 0, h.width, h.height); var j = h.toDataURL("image/jpeg", g.quality); if (window.URL && compressImageTempUrl) { window.URL.revokeObjectURL(compressImageTempUrl); compressImageTempUrl = null } if (g.success && typeof (g.success) == "function") { g.success(j) } } catch (k) { if (g.error && typeof (g.error) == "function") { g.error("压缩图片失败") } } } function d(h) { var i = new Image(); i.onload = function () { a(i) }; i.onerror = function () { if (window.URL && compressImageTempUrl) { window.URL.revokeObjectURL(compressImageTempUrl); compressImageTempUrl = null } if (g.error && typeof (g.error) == "function") { g.error("加载图片失败") } }; i.src = h } var c; if (window.URL) { c = window.URL.createObjectURL(b); compressImageTempUrl = c; d(c) } else { var f = new FileReader(); f.onload = function (h) { c = f.result; compressImageTempUrl = c; d(c) }; f.readAsDataURL(file) } } } var _rr_msg_timeout; var _rr_styles = ["default", "success", "error", "danger", "info"]; function showMsg(b, c) { $("#_rr_msg").remove(); clearTimeout(_rr_msg_timeout); var d = { bg: "rgba(255,255,255,0.8)", color: "#000", fontSize: "15px", border: "1px solid #ddd", position: "middle", time: 2000, zIndex: 99900000, style: "default", end: null }; if (c) { $.extend(d, c) } getRMsgStyle(d); $("body").append('<div id="_rr_msg" style="background:' + d.bg + ";color:" + d.color + ";font-size:" + d.fontSize + ";border-radius:3px;position:fixed;z-index:" + d.zIndex + ';display:none;text-align:center;padding:15px 20px;box-shadow:0 0 0.5em #555;">' + b + "</div>"); var a = $("#_rr_msg"); a.css({ left: ($(window).width() - a.outerWidth()) / 2 }); if (d.y) { a.css({ top: d.y }) } else { if (d.position == "top") { a.css({ top: 10 }) } else { if (d.position == "bottom") { a.css({ bottom: 10 }) } else { a.css({ top: ($(window).height() - a.outerHeight()) / 2 }) } } } $("#_rr_msg").show(); _rr_msg_timeout = setTimeout(function () { $("#_rr_msg").remove(); if (typeof (d.end) == "function") { end() } }, d.time) } function getRMsgStyle(a) { if (!_rr_styles.contains(a.style, true)) { a.style = "default" } a.style = a.style.toLowerCase(); if (a.style == "success") { a.bg = "#dff0d8"; a.color = "#468847"; a.border = "1px solid #d6e9c6" } else { if (a.style == "error") { a.bg = "#f37b1d"; a.color = "#fff"; a.border = "1px solid #e56c0c" } else { if (a.style == "danger") { a.bg = "#f2dede"; a.color = "#b94a48"; a.border = "1px solid #eed3d7" } else { if (a.style == "info") { a.bg = "#d9edf7"; a.color = "#31708f"; a.border = "1px solid #bce8f1" } } } } } function showLoading(b, c) { if (b) { $("#_rr_wait_msg").remove(); var d = { bg: "rgba(255,255,255,0.8)", color: "#000", fontSize: "15px", border: "1px solid #ddd", position: "middle", time: 2000, zIndex: 99900000, style: "default", end: null }; if (c) { $.extend(d, c) } getRMsgStyle(d); $("body").append('<div id="_rr_wait_msg" style="background:' + d.bg + ";color:" + d.color + ";font-size:" + d.fontSize + ";border-radius:3px;position:fixed;z-index:" + d.zIndex + ';text-align:center;padding:15px 20px;box-shadow:0 0 0.5em #555">' + b + '<span id="_rr_wait_msg_per" style="padding-left:10px;font-size:16px;color:' + d.color + '"></span></div>'); var a = $("#_rr_wait_msg"); a.css({ left: ($(window).width() - a.outerWidth()) / 2 }); if (d.position == "top") { a.css({ top: 0 }) } else { if (d.position == "bottom") { a.css({ bottom: 0 }) } else { a.css({ top: ($(window).height() - a.outerHeight()) / 2 }) } } } else { $("#_rr_wait_msg").remove() } } function setLoadingPercent(a) { $("#_rr_wait_msg_per").html(a) } function showMask(c, a) { var b = { opacity: 0.3, zIndex: 90000000, bg: "#000000" }; if (c) { $("#_rr_mask").remove(); if (a) { $.extend(b, a) } $("body").append('<div id="_rr_mask" style="position:fixed;left:0;top:0;right:0;bottom:0;opacity:' + b.opacity + ";background:" + b.bg + ";z-index:" + b.zIndex + ';"></div>') } else { $("#_rr_mask").remove() } } function getData(b) { var a = {}; $(b).each(function (d, c) { a[$(c).attr("id")] = $.trim($(c).val()) }); return a } function enableScroll(a) { if (!a) { var b = $(document).scrollTop(); $("html").attr("style", "position:fixed;width:100%;overflow-y:scroll").css("top", 0 - b) } else { var b = parseInt($("html").css("top")); $("html").removeAttr("style"); $(document).scrollTop(0 - b) } } function getPureUrl(a) { if (a.indexOf("#") != -1) { a = a.substr(0, a.indexOf("#")) } if (a.indexOf("!") != -1) { a = a.substr(0, a.indexOf("!")) } if (a.indexOf("?") != -1) { a = a.substr(0, a.indexOf("?")) } return a } Array.prototype.contains = function (c, b) { for (var a = 0; a < this.length; a++) { if (b) { if ((this[a] + "").toLowerCase() == (c + "").toLowerCase()) { return true } } else { if (this[a] == c) { return true } } } return false }; Array.prototype.removeValue = function (b) { for (var a = 0; a < this.length; a++) { if (this[a] == b) { this.splice(a, 1); break } } }; String.prototype.contains = function (a) { return this.indexOf(a) == -1 ? false : true }; String.prototype.notContainsAny = function (b) { for (var a = 0; a < b.length; a++) { if (this.contains(b[a])) { return false } } return true }; String.prototype.containsAny = function (b) { for (var a = 0; a < b.length; a++) { if (this.contains(b[a])) { return true } } return false }; String.prototype.containsAll = function (b) { for (var a = 0; a < b.length; a++) { if (!this.contains(b[a])) { return false } } return true }; function qnupload(c, e, b, d, a) { uploadfile("http://upload.qiniu.com", b, { key: c, token: e }, d, a) } function uploadFile(h, c, a, g, b) { var f = new XMLHttpRequest(); var d = new FormData(); for (var e in a) { d.append(e, a[e]) } d.append("file", c); $.ajax({ url: h, type: "post", data: d, contentType: false, processData: false, dataType: "json", success: function (i) { if (g) { g(qnret.key) } }, error: function () { if (b) { b() } } }) } function rGetParamFromUrl(e, a) { if (e.indexOf("?") == -1) { return "" } var d = new RegExp("(^|&)" + a + "=([^&]*)(&|$)", "i"); var b = e.substring(e.indexOf("?") + 1); var c = b.match(d); if (c != null) { return decodeURIComponent(c[2]) } else { return "" } } function rGetCookie(b) { var a, c = new RegExp("(^| )" + b + "=([^;]*)(;|$)"); if (a = document.cookie.match(c)) { return decodeURIComponent(a[2]) } else { return "" } } function rSetCookie(c, e, b, d, a) { if (a) { if (a.indexOf(":") != -1) { a = a.substr(0, a.indexOf(":")) } } document.cookie = c + "=" + e + ";expires=" + rGetExpires(b) + ";path=" + d + (a ? (";domain=" + a) : "") } function rDeleteCookie(a) { rSetCookie(a, "", -1000, "/") } function rGetExpires(a) { var b = new Date(); b.setTime(b.getTime() + a * 1000); return b.toUTCString() } function ftSetSize(s) { var r = getScrollBarWidth(); var e, b, c, d, a, g, h, i, f; var k, j, p; e = $("#" + s + "_tableLayout"); k = parseInt(e.attr("autoShrinkWidth")); j = parseInt(e.attr("autoShrinkHeight")); p = parseInt(e.attr("fixColumNumber")); b = e.find(".ftData"); c = e.find(".ftFix"); d = e.find(".ftHead"); a = e.find(".ftColumn"); g = e.find(".ftTableData"); h = e.find(".ftTableFix"); i = e.find(".ftTableHead"); f = e.find(".ftTableColumn"); var o = g.outerWidth(); h.width(o); i.width(o); f.width(o); var q = d.find("td:first").outerHeight() + 1; var m = 0; var l = 0; $("#" + s + "_tableColumn tr:first td:lt(" + p + ")").each(function () { m += $(this).outerWidth(true); l++ }); m += 1; c.css({ overflow: "hidden", width: m, height: q, position: "absolute", left: 0, top: 0, "z-index": "2", "background-color": "white" }); d.css({ overflow: "hidden", width: e.width() - r, height: q, position: "absolute", left: 0, top: 0, "z-index": "1", "background-color": "white" }); a.css({ overflow: "hidden", width: m, height: e.height() - r, position: "absolute", left: 0, top: 0, "z-index": "1", "background-color": "white" }); if (k && b.width() > o + r) { d.css("width", o); b.css("width", o + r); e.css("width", o + r) } var n = g.outerHeight(); if (j && a.height() > n) { a.css("height", n); e.css("height", n + r) } } function getScrollBarWidth() { var a = $('<div style="width:100px;height:1px;overflow-y:scroll;overflow-x:hidden"></div>'); var b = $('<div style="width:100%;height:1px;background:blue"></div>'); a.append(b); $("body").append(a); var c = 100 - b.width(); a.remove(); return c } function getGuid(a) { function b() { return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1) } return b() + b() + (a ? "-" : "") + b() + (a ? "-" : "") + b() + (a ? "-" : "") + b() + (a ? "-" : "") + b() + b() + b() };